-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelDesmos where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsDesmos

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsDesmos.Id -> Result
transId x = case x of
  AbsDesmos.Id string -> failure x

transExp :: AbsDesmos.Exp -> Result
transExp x = case x of
  AbsDesmos.Plus exp1 exp2 -> failure x
  AbsDesmos.Minus exp1 exp2 -> failure x
  AbsDesmos.Times exp1 exp2 -> failure x
  AbsDesmos.Negate exp -> failure x
  AbsDesmos.Fact exp -> failure x
  AbsDesmos.Div exp1 exp2 -> failure x
  AbsDesmos.Exp exp1 exp2 -> failure x
  AbsDesmos.Sqrt exp -> failure x
  AbsDesmos.NRt exp1 exp2 -> failure x
  AbsDesmos.Sin exp -> failure x
  AbsDesmos.Cos exp -> failure x
  AbsDesmos.Tan exp -> failure x
  AbsDesmos.ASin exp -> failure x
  AbsDesmos.ACos exp -> failure x
  AbsDesmos.ATan exp -> failure x
  AbsDesmos.Ln exp -> failure x
  AbsDesmos.Log exp -> failure x
  AbsDesmos.Mean exp -> failure x
  AbsDesmos.Stdev exp -> failure x
  AbsDesmos.StdevP exp -> failure x
  AbsDesmos.NPR exp -> failure x
  AbsDesmos.NCR exp -> failure x
  AbsDesmos.Round exp -> failure x
  AbsDesmos.Percent exp1 exp2 -> failure x
  AbsDesmos.Abs exp -> failure x
  AbsDesmos.Elems exp1 exp2 -> failure x
  AbsDesmos.List exp -> failure x
  AbsDesmos.Index exp1 exp2 -> failure x
  AbsDesmos.E -> failure x
  AbsDesmos.Pi -> failure x
  AbsDesmos.Int integer -> failure x
  AbsDesmos.Dbl double -> failure x
  AbsDesmos.Var id -> failure x
  AbsDesmos.Equal exp1 exp2 -> failure x
